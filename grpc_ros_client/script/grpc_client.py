#!/usr/bin/env python3
import grpc
import rospy
# proto to ROS msg converted messages
from grpc_ros_interface.msg import BrokerRequest
from grpc_ros_interface.msg import BrokerResponse
# proto autogenerated messages for payload
import demo_pb2 as pb2
# proto autogenerated messages for setting up communciation channel
import demo_pb2_grpc as pb2_grpc
# Communication address:port with the gRPC server
PORT = 'localhost:50051'

class GrpcClient(object):

    def __init__(self, 
                topic_sub='grpc_request', 
                topic_pub='grpc_response', 
                req_msg_type=BrokerRequest,
                res_msg_type=BrokerResponse):
        """
        initializes the grpc communciation channel, 
        subscriber and publisher to/from ROS side
        """
        channel = grpc.insecure_channel(PORT)
        self.stub = pb2_grpc.BrokerServiceStub(channel)
        
        self.sub = rospy.Subscriber(
            topic_sub, 
            req_msg_type, 
            self.grpc_server_request
        )
        
        self.pub = rospy.Publisher(
            topic_pub, 
            res_msg_type, 
            queue_size = 10
        )

    def grpc_server_request(self, msg):
        """
        This is a callback from the sub and publishes 
        the subscribed payload directly to the gRPC server.
        demo_pb2 module is used to publish the subscribed ROS msgs to server
        """
        # Send request payload as ROS msg
        request = pb2.BrokerRequest(
            id=int(msg.id),
            sensor1=float(msg.sensor1),
            sensor2=float(msg.sensor2),
            sensor3=float(msg.sensor3),
            sensor4=float(msg.sensor4))
        response = self.stub.SimpleMethod(request)
        rospy.loginfo("{0} ,{1}, {2}, {3}, {4}" .format(msg.id, msg.sensor1, msg.sensor2, msg.sensor3, msg.sensor4))
        # Convert the protobuff response payload to ROS msg
        self.msg = BrokerResponse()
        self.msg.id = response.id
        self.msg.prediction = response.prediction
        self.grpc_server_response(self.msg)

    def grpc_server_response(self, msg):
        """
        Publishes the gRPC server response to the ROS side
        """
        self.pub.publish(msg)
        rospy.loginfo("{0}, {1}".format(msg.id, msg.prediction))

def main(args=None):
    rospy.init_node('broker_service_request')
    GrpcClient()
    while not rospy.is_shutdown():
        try:
            rospy.spin()
        except rospy.ROSInterruptException:
	        rospy.logerr("ROS Interrupt Exception! Just ignore the exception!")

if __name__ == '__main__':
    main()